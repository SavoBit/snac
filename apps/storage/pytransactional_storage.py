# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _pytransactional_storage
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PyTransactional_storage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyTransactional_storage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PyTransactional_storage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pytransactional_storage.new_PyTransactional_storage(*args)
        try: self.this.append(this)
        except: self.this = this
    def configure(*args): return _pytransactional_storage.PyTransactional_storage_configure(*args)
    def install(*args): return _pytransactional_storage.PyTransactional_storage_install(*args)
    def get_connection(*args): return _pytransactional_storage.PyTransactional_storage_get_connection(*args)
    __swig_destroy__ = _pytransactional_storage.delete_PyTransactional_storage
    __del__ = lambda self : None;
PyTransactional_storage_swigregister = _pytransactional_storage.PyTransactional_storage_swigregister
PyTransactional_storage_swigregister(PyTransactional_storage)

class PyTransactional_connection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyTransactional_connection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PyTransactional_connection, name)
    __repr__ = _swig_repr
    def begin(*args): return _pytransactional_storage.PyTransactional_connection_begin(*args)
    def commit(*args): return _pytransactional_storage.PyTransactional_connection_commit(*args)
    def rollback(*args): return _pytransactional_storage.PyTransactional_connection_rollback(*args)
    def get_transaction_mode(*args): return _pytransactional_storage.PyTransactional_connection_get_transaction_mode(*args)
    def create_table(*args): return _pytransactional_storage.PyTransactional_connection_create_table(*args)
    def drop_table(*args): return _pytransactional_storage.PyTransactional_connection_drop_table(*args)
    def get(*args): return _pytransactional_storage.PyTransactional_connection_get(*args)
    def put(*args): return _pytransactional_storage.PyTransactional_connection_put(*args)
    def modify(*args): return _pytransactional_storage.PyTransactional_connection_modify(*args)
    def remove(*args): return _pytransactional_storage.PyTransactional_connection_remove(*args)
    def put_row_trigger(*args): return _pytransactional_storage.PyTransactional_connection_put_row_trigger(*args)
    def put_table_trigger(*args): return _pytransactional_storage.PyTransactional_connection_put_table_trigger(*args)
    def remove_trigger(*args): return _pytransactional_storage.PyTransactional_connection_remove_trigger(*args)
    def __init__(self, *args): 
        this = _pytransactional_storage.new_PyTransactional_connection(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pytransactional_storage.delete_PyTransactional_connection
    __del__ = lambda self : None;
PyTransactional_connection_swigregister = _pytransactional_storage.PyTransactional_connection_swigregister
PyTransactional_connection_swigregister(PyTransactional_connection)

class PyTransactional_cursor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyTransactional_cursor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PyTransactional_cursor, name)
    __repr__ = _swig_repr
    def get_next(*args): return _pytransactional_storage.PyTransactional_cursor_get_next(*args)
    def close(*args): return _pytransactional_storage.PyTransactional_cursor_close(*args)
    def __init__(self, *args): 
        this = _pytransactional_storage.new_PyTransactional_cursor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pytransactional_storage.delete_PyTransactional_cursor
    __del__ = lambda self : None;
PyTransactional_cursor_swigregister = _pytransactional_storage.PyTransactional_cursor_swigregister
PyTransactional_cursor_swigregister(PyTransactional_cursor)



